{"$message_type":"diagnostic","message":"this loop could be written as a `while let` loop","code":{"code":"clippy::while_let_loop","explanation":null},"level":"warning","spans":[{"file_name":"src/tunnel/client.rs","byte_start":3286,"byte_end":7612,"line_start":119,"line_end":206,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    loop {","highlight_start":5,"highlight_end":11},{"text":"        if let Some(msg) = socket.next().await {","highlight_start":1,"highlight_end":49},{"text":"            match msg {","highlight_start":1,"highlight_end":24},{"text":"                Ok(Message::Binary(data)) => {","highlight_start":1,"highlight_end":47},{"text":"                    match serde_json::from_slice::<TunnelMessage>(&data) {","highlight_start":1,"highlight_end":75},{"text":"                        Ok(TunnelMessage::Data { data }) => {","highlight_start":1,"highlight_end":62},{"text":"                            // Forward the data to the local service","highlight_start":1,"highlight_end":69},{"text":"                            match TcpStream::connect(format!(\"127.0.0.1:{}\", local_port)).await {","highlight_start":1,"highlight_end":98},{"text":"                                Ok(mut local_stream) => {","highlight_start":1,"highlight_end":58},{"text":"                                    // Write the data to the local service","highlight_start":1,"highlight_end":75},{"text":"                                    if let Err(e) = local_stream.write_all(&data).await {","highlight_start":1,"highlight_end":90},{"text":"                                        log_sender","highlight_start":1,"highlight_end":51},{"text":"                                            .send(format!(\"Error writing to local service: {}\", e))","highlight_start":1,"highlight_end":100},{"text":"                                            .await?;","highlight_start":1,"highlight_end":53},{"text":"                                        continue;","highlight_start":1,"highlight_end":50},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    // Read the response from the local service","highlight_start":1,"highlight_end":80},{"text":"                                    let mut buffer = vec![0; 8192];","highlight_start":1,"highlight_end":68},{"text":"                                    match local_stream.read(&mut buffer).await {","highlight_start":1,"highlight_end":81},{"text":"                                        Ok(n) if n > 0 => {","highlight_start":1,"highlight_end":60},{"text":"                                            buffer.truncate(n);","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                            // Send the response back to the server","highlight_start":1,"highlight_end":84},{"text":"                                            let response = TunnelMessage::Data { data: buffer };","highlight_start":1,"highlight_end":97},{"text":"                                            socket","highlight_start":1,"highlight_end":51},{"text":"                                                .send(Message::Binary(serde_json::to_vec(","highlight_start":1,"highlight_end":90},{"text":"                                                    &response,","highlight_start":1,"highlight_end":63},{"text":"                                                )?))","highlight_start":1,"highlight_end":53},{"text":"                                                .await?;","highlight_start":1,"highlight_end":57},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        Ok(_) => {","highlight_start":1,"highlight_end":51},{"text":"                                            log_sender","highlight_start":1,"highlight_end":55},{"text":"                                                .send(","highlight_start":1,"highlight_end":55},{"text":"                                                    \"Local service closed the connection\"","highlight_start":1,"highlight_end":90},{"text":"                                                        .to_string(),","highlight_start":1,"highlight_end":70},{"text":"                                                )","highlight_start":1,"highlight_end":50},{"text":"                                                .await?;","highlight_start":1,"highlight_end":57},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        Err(e) => {","highlight_start":1,"highlight_end":52},{"text":"                                            log_sender","highlight_start":1,"highlight_end":55},{"text":"                                                .send(format!(","highlight_start":1,"highlight_end":63},{"text":"                                                    \"Error reading from local service: {}\",","highlight_start":1,"highlight_end":92},{"text":"                                                    e","highlight_start":1,"highlight_end":54},{"text":"                                                ))","highlight_start":1,"highlight_end":51},{"text":"                                                .await?;","highlight_start":1,"highlight_end":57},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                Err(e) => {","highlight_start":1,"highlight_end":44},{"text":"                                    log_sender","highlight_start":1,"highlight_end":47},{"text":"                                        .send(format!(\"Failed to connect to local service: {}\", e))","highlight_start":1,"highlight_end":100},{"text":"                                        .await?;","highlight_start":1,"highlight_end":49},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(TunnelMessage::KeepAlive) => {","highlight_start":1,"highlight_end":58},{"text":"                            // Send keep-alive response","highlight_start":1,"highlight_end":56},{"text":"                            socket","highlight_start":1,"highlight_end":35},{"text":"                                .send(Message::Binary(serde_json::to_vec(","highlight_start":1,"highlight_end":74},{"text":"                                    &TunnelMessage::KeepAlive,","highlight_start":1,"highlight_end":63},{"text":"                                )?))","highlight_start":1,"highlight_end":37},{"text":"                                .await?;","highlight_start":1,"highlight_end":41},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        _ => {","highlight_start":1,"highlight_end":31},{"text":"                            log_sender","highlight_start":1,"highlight_end":39},{"text":"                                .send(\"Received unknown message type\".to_string())","highlight_start":1,"highlight_end":83},{"text":"                                .await?;","highlight_start":1,"highlight_end":41},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                Ok(Message::Close(_)) => {","highlight_start":1,"highlight_end":43},{"text":"                    log_sender","highlight_start":1,"highlight_end":31},{"text":"                        .send(\"Server closed the connection\".to_string())","highlight_start":1,"highlight_end":74},{"text":"                        .await?;","highlight_start":1,"highlight_end":33},{"text":"                    break;","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                Err(e) => {","highlight_start":1,"highlight_end":28},{"text":"                    log_sender.send(format!(\"WebSocket error: {}\", e)).await?;","highlight_start":1,"highlight_end":79},{"text":"                    break;","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                _ => {}","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            // Connection closed","highlight_start":1,"highlight_end":33},{"text":"            break;","highlight_start":1,"highlight_end":19},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#while_let_loop","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::while_let_loop)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/tunnel/client.rs","byte_start":3286,"byte_end":7612,"line_start":119,"line_end":206,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    loop {","highlight_start":5,"highlight_end":11},{"text":"        if let Some(msg) = socket.next().await {","highlight_start":1,"highlight_end":49},{"text":"            match msg {","highlight_start":1,"highlight_end":24},{"text":"                Ok(Message::Binary(data)) => {","highlight_start":1,"highlight_end":47},{"text":"                    match serde_json::from_slice::<TunnelMessage>(&data) {","highlight_start":1,"highlight_end":75},{"text":"                        Ok(TunnelMessage::Data { data }) => {","highlight_start":1,"highlight_end":62},{"text":"                            // Forward the data to the local service","highlight_start":1,"highlight_end":69},{"text":"                            match TcpStream::connect(format!(\"127.0.0.1:{}\", local_port)).await {","highlight_start":1,"highlight_end":98},{"text":"                                Ok(mut local_stream) => {","highlight_start":1,"highlight_end":58},{"text":"                                    // Write the data to the local service","highlight_start":1,"highlight_end":75},{"text":"                                    if let Err(e) = local_stream.write_all(&data).await {","highlight_start":1,"highlight_end":90},{"text":"                                        log_sender","highlight_start":1,"highlight_end":51},{"text":"                                            .send(format!(\"Error writing to local service: {}\", e))","highlight_start":1,"highlight_end":100},{"text":"                                            .await?;","highlight_start":1,"highlight_end":53},{"text":"                                        continue;","highlight_start":1,"highlight_end":50},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    // Read the response from the local service","highlight_start":1,"highlight_end":80},{"text":"                                    let mut buffer = vec![0; 8192];","highlight_start":1,"highlight_end":68},{"text":"                                    match local_stream.read(&mut buffer).await {","highlight_start":1,"highlight_end":81},{"text":"                                        Ok(n) if n > 0 => {","highlight_start":1,"highlight_end":60},{"text":"                                            buffer.truncate(n);","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                            // Send the response back to the server","highlight_start":1,"highlight_end":84},{"text":"                                            let response = TunnelMessage::Data { data: buffer };","highlight_start":1,"highlight_end":97},{"text":"                                            socket","highlight_start":1,"highlight_end":51},{"text":"                                                .send(Message::Binary(serde_json::to_vec(","highlight_start":1,"highlight_end":90},{"text":"                                                    &response,","highlight_start":1,"highlight_end":63},{"text":"                                                )?))","highlight_start":1,"highlight_end":53},{"text":"                                                .await?;","highlight_start":1,"highlight_end":57},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        Ok(_) => {","highlight_start":1,"highlight_end":51},{"text":"                                            log_sender","highlight_start":1,"highlight_end":55},{"text":"                                                .send(","highlight_start":1,"highlight_end":55},{"text":"                                                    \"Local service closed the connection\"","highlight_start":1,"highlight_end":90},{"text":"                                                        .to_string(),","highlight_start":1,"highlight_end":70},{"text":"                                                )","highlight_start":1,"highlight_end":50},{"text":"                                                .await?;","highlight_start":1,"highlight_end":57},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        Err(e) => {","highlight_start":1,"highlight_end":52},{"text":"                                            log_sender","highlight_start":1,"highlight_end":55},{"text":"                                                .send(format!(","highlight_start":1,"highlight_end":63},{"text":"                                                    \"Error reading from local service: {}\",","highlight_start":1,"highlight_end":92},{"text":"                                                    e","highlight_start":1,"highlight_end":54},{"text":"                                                ))","highlight_start":1,"highlight_end":51},{"text":"                                                .await?;","highlight_start":1,"highlight_end":57},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                Err(e) => {","highlight_start":1,"highlight_end":44},{"text":"                                    log_sender","highlight_start":1,"highlight_end":47},{"text":"                                        .send(format!(\"Failed to connect to local service: {}\", e))","highlight_start":1,"highlight_end":100},{"text":"                                        .await?;","highlight_start":1,"highlight_end":49},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(TunnelMessage::KeepAlive) => {","highlight_start":1,"highlight_end":58},{"text":"                            // Send keep-alive response","highlight_start":1,"highlight_end":56},{"text":"                            socket","highlight_start":1,"highlight_end":35},{"text":"                                .send(Message::Binary(serde_json::to_vec(","highlight_start":1,"highlight_end":74},{"text":"                                    &TunnelMessage::KeepAlive,","highlight_start":1,"highlight_end":63},{"text":"                                )?))","highlight_start":1,"highlight_end":37},{"text":"                                .await?;","highlight_start":1,"highlight_end":41},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        _ => {","highlight_start":1,"highlight_end":31},{"text":"                            log_sender","highlight_start":1,"highlight_end":39},{"text":"                                .send(\"Received unknown message type\".to_string())","highlight_start":1,"highlight_end":83},{"text":"                                .await?;","highlight_start":1,"highlight_end":41},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                Ok(Message::Close(_)) => {","highlight_start":1,"highlight_end":43},{"text":"                    log_sender","highlight_start":1,"highlight_end":31},{"text":"                        .send(\"Server closed the connection\".to_string())","highlight_start":1,"highlight_end":74},{"text":"                        .await?;","highlight_start":1,"highlight_end":33},{"text":"                    break;","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                Err(e) => {","highlight_start":1,"highlight_end":28},{"text":"                    log_sender.send(format!(\"WebSocket error: {}\", e)).await?;","highlight_start":1,"highlight_end":79},{"text":"                    break;","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                _ => {}","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            // Connection closed","highlight_start":1,"highlight_end":33},{"text":"            break;","highlight_start":1,"highlight_end":19},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":"while let Some(msg) = socket.next().await { .. }","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this loop could be written as a `while let` loop\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tunnel/client.rs:119:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    loop {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(msg) = socket.next().await {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match msg {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok(Message::Binary(data)) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `while let Some(msg) = socket.next().await { .. }`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#while_let_loop\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::while_let_loop)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `if let` can be collapsed into the outer `if let`","code":{"code":"clippy::collapsible_match","explanation":null},"level":"warning","spans":[{"file_name":"src/tunnel/server.rs","byte_start":2906,"byte_end":7891,"line_start":87,"line_end":191,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if let Message::Binary(data) = msg {","highlight_start":9,"highlight_end":45},{"text":"            match serde_json::from_slice::<TunnelMessage>(&data) {","highlight_start":1,"highlight_end":67},{"text":"                Ok(TunnelMessage::Register { client_id, domain }) => {","highlight_start":1,"highlight_end":71},{"text":"                    println!(","highlight_start":1,"highlight_end":30},{"text":"                        \"Client registered: {} with domain: {:?}\",","highlight_start":1,"highlight_end":67},{"text":"                        client_id, &domain","highlight_start":1,"highlight_end":43},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Create a channel for this client","highlight_start":1,"highlight_end":56},{"text":"                    let (sender, mut receiver) = mpsc::channel::<Message>(100);","highlight_start":1,"highlight_end":80},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Store client info with cloned domain","highlight_start":1,"highlight_end":60},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        let mut clients_lock = clients.lock().await;","highlight_start":1,"highlight_end":69},{"text":"                        clients_lock.insert(","highlight_start":1,"highlight_end":45},{"text":"                            client_id.clone(),","highlight_start":1,"highlight_end":47},{"text":"                            ClientInfo {","highlight_start":1,"highlight_end":41},{"text":"                                domain: domain.clone(),","highlight_start":1,"highlight_end":56},{"text":"                                sender: sender.clone(),","highlight_start":1,"highlight_end":56},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Generate and send the tunnel URL","highlight_start":1,"highlight_end":56},{"text":"                    let domain_part = if let Some(domain_val) = &domain {","highlight_start":1,"highlight_end":74},{"text":"                        domain_val.clone()","highlight_start":1,"highlight_end":43},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        format!(\"{}.public.dev.peril.lol\", client_id)","highlight_start":1,"highlight_end":70},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    let tunnel_url = format!(\"https://{}\", domain_part);","highlight_start":1,"highlight_end":73},{"text":"                    let response = TunnelMessage::Registered {","highlight_start":1,"highlight_end":63},{"text":"                        url: tunnel_url.clone(),","highlight_start":1,"highlight_end":49},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    ws_sender","highlight_start":1,"highlight_end":30},{"text":"                        .send(Message::Binary(serde_json::to_vec(&response)?))","highlight_start":1,"highlight_end":79},{"text":"                        .await?;","highlight_start":1,"highlight_end":33},{"text":"                    println!(\"Sent registration confirmation: {}\", tunnel_url);","highlight_start":1,"highlight_end":80},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Create a separate task for handling messages to the client","highlight_start":1,"highlight_end":82},{"text":"                    let sender_for_ws = sender.clone();","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Now handle the data forwarding for this client","highlight_start":1,"highlight_end":70},{"text":"                    tokio::spawn(async move {","highlight_start":1,"highlight_end":46},{"text":"                        // Forward messages from receiver to WebSocket","highlight_start":1,"highlight_end":71},{"text":"                        while let Some(msg) = receiver.recv().await {","highlight_start":1,"highlight_end":70},{"text":"                            if sender_for_ws.send(msg).await.is_err() {","highlight_start":1,"highlight_end":72},{"text":"                                break;","highlight_start":1,"highlight_end":39},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Handle incoming WebSocket messages","highlight_start":1,"highlight_end":58},{"text":"                    while let Some(Ok(msg)) = ws_receiver.next().await {","highlight_start":1,"highlight_end":73},{"text":"                        match msg {","highlight_start":1,"highlight_end":36},{"text":"                            Message::Binary(data) => {","highlight_start":1,"highlight_end":55},{"text":"                                if let Ok(tunnel_msg) =","highlight_start":1,"highlight_end":56},{"text":"                                    serde_json::from_slice::<TunnelMessage>(&data)","highlight_start":1,"highlight_end":83},{"text":"                                {","highlight_start":1,"highlight_end":34},{"text":"                                    match tunnel_msg {","highlight_start":1,"highlight_end":55},{"text":"                                        TunnelMessage::Data {","highlight_start":1,"highlight_end":62},{"text":"                                            data: response_data,","highlight_start":1,"highlight_end":65},{"text":"                                        } => {","highlight_start":1,"highlight_end":47},{"text":"                                            // This would be handled by the HTTP connection handler","highlight_start":1,"highlight_end":100},{"text":"                                            println!(","highlight_start":1,"highlight_end":54},{"text":"                                                \"Received data response from client: {} bytes\",","highlight_start":1,"highlight_end":96},{"text":"                                                response_data.len()","highlight_start":1,"highlight_end":68},{"text":"                                            );","highlight_start":1,"highlight_end":47},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        TunnelMessage::KeepAlive => {","highlight_start":1,"highlight_end":70},{"text":"                                            // Send keep-alive response","highlight_start":1,"highlight_end":72},{"text":"                                            if let Err(e) = ws_sender","highlight_start":1,"highlight_end":70},{"text":"                                                .send(Message::Binary(serde_json::to_vec(","highlight_start":1,"highlight_end":90},{"text":"                                                    &TunnelMessage::KeepAlive,","highlight_start":1,"highlight_end":79},{"text":"                                                )?))","highlight_start":1,"highlight_end":53},{"text":"                                                .await","highlight_start":1,"highlight_end":55},{"text":"                                            {","highlight_start":1,"highlight_end":46},{"text":"                                                eprintln!(\"Error sending keep-alive: {}\", e);","highlight_start":1,"highlight_end":94},{"text":"                                                break;","highlight_start":1,"highlight_end":55},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        _ => {","highlight_start":1,"highlight_end":47},{"text":"                                            println!(\"Ignoring unexpected message type\");","highlight_start":1,"highlight_end":90},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Message::Close(_) => {","highlight_start":1,"highlight_end":51},{"text":"                                break;","highlight_start":1,"highlight_end":39},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            _ => {}","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Client disconnected, remove from active clients","highlight_start":1,"highlight_end":71},{"text":"                    let mut clients_lock = clients.lock().await;","highlight_start":1,"highlight_end":65},{"text":"                    clients_lock.remove(&client_id);","highlight_start":1,"highlight_end":53},{"text":"                    println!(\"Client disconnected: {}\", client_id);","highlight_start":1,"highlight_end":68},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                _ => {","highlight_start":1,"highlight_end":23},{"text":"                    println!(\"Received unexpected message type on initial connection\");","highlight_start":1,"highlight_end":88},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the outer pattern can be modified to include the inner pattern","code":null,"level":"help","spans":[{"file_name":"src/tunnel/server.rs","byte_start":2863,"byte_end":2866,"line_start":86,"line_end":86,"column_start":20,"column_end":23,"is_primary":true,"text":[{"text":"    if let Some(Ok(msg)) = ws_receiver.next().await {","highlight_start":20,"highlight_end":23}],"label":"replace this binding","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/tunnel/server.rs","byte_start":2913,"byte_end":2934,"line_start":87,"line_end":87,"column_start":16,"column_end":37,"is_primary":true,"text":[{"text":"        if let Message::Binary(data) = msg {","highlight_start":16,"highlight_end":37}],"label":"with this pattern","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::collapsible_match)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if let` can be collapsed into the outer `if let`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tunnel/server.rs:87:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Message::Binary(data) = msg {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match serde_json::from_slice::<TunnelMessage>(&data) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok(TunnelMessage::Register { client_id, domain }) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    println!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the outer pattern can be modified to include the inner pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tunnel/server.rs:86:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if let Some(Ok(msg)) = ws_receiver.next().await {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mreplace this binding\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Message::Binary(data) = msg {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mwith this pattern\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::collapsible_match)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type parameter `B` goes unused in function definition","code":{"code":"clippy::extra_unused_type_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/ui.rs","byte_start":729,"byte_end":741,"line_start":30,"line_end":30,"column_start":15,"column_end":27,"is_primary":true,"text":[{"text":"fn draw_header<B: Backend>(f: &mut Frame, _app: &App, area: Rect) {","highlight_start":15,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_type_parameters","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::extra_unused_type_parameters)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider removing the parameter","code":null,"level":"help","spans":[{"file_name":"src/ui.rs","byte_start":729,"byte_end":741,"line_start":30,"line_end":30,"column_start":15,"column_end":27,"is_primary":true,"text":[{"text":"fn draw_header<B: Backend>(f: &mut Frame, _app: &App, area: Rect) {","highlight_start":15,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type parameter `B` goes unused in function definition\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ui.rs:30:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn draw_header<B: Backend>(f: &mut Frame, _app: &App, area: Rect) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider removing the parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_type_parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::extra_unused_type_parameters)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type parameter `B` goes unused in function definition","code":{"code":"clippy::extra_unused_type_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/ui.rs","byte_start":1044,"byte_end":1056,"line_start":38,"line_end":38,"column_start":15,"column_end":27,"is_primary":true,"text":[{"text":"fn draw_status<B: Backend>(f: &mut Frame, app: &App, area: Rect) {","highlight_start":15,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_type_parameters","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider removing the parameter","code":null,"level":"help","spans":[{"file_name":"src/ui.rs","byte_start":1044,"byte_end":1056,"line_start":38,"line_end":38,"column_start":15,"column_end":27,"is_primary":true,"text":[{"text":"fn draw_status<B: Backend>(f: &mut Frame, app: &App, area: Rect) {","highlight_start":15,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type parameter `B` goes unused in function definition\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ui.rs:38:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn draw_status<B: Backend>(f: &mut Frame, app: &App, area: Rect) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider removing the parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_type_parameters\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type parameter `B` goes unused in function definition","code":{"code":"clippy::extra_unused_type_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/ui.rs","byte_start":1863,"byte_end":1875,"line_start":69,"line_end":69,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"fn draw_logs<B: Backend>(f: &mut Frame, app: &App, area: Rect) {","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_type_parameters","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider removing the parameter","code":null,"level":"help","spans":[{"file_name":"src/ui.rs","byte_start":1863,"byte_end":1875,"line_start":69,"line_end":69,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"fn draw_logs<B: Backend>(f: &mut Frame, app: &App, area: Rect) {","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type parameter `B` goes unused in function definition\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ui.rs:69:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn draw_logs<B: Backend>(f: &mut Frame, app: &App, area: Rect) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider removing the parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_type_parameters\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"useless use of `vec!`","code":{"code":"clippy::useless_vec","explanation":null},"level":"warning","spans":[{"file_name":"src/ui.rs","byte_start":1501,"byte_end":1531,"line_start":54,"line_end":54,"column_start":16,"column_end":46,"is_primary":true,"text":[{"text":"    let text = vec![status, help.to_string()];","highlight_start":16,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::useless_vec)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use an array directly","code":null,"level":"help","spans":[{"file_name":"src/ui.rs","byte_start":1501,"byte_end":1531,"line_start":54,"line_end":54,"column_start":16,"column_end":46,"is_primary":true,"text":[{"text":"    let text = vec![status, help.to_string()];","highlight_start":16,"highlight_end":46}],"label":null,"suggested_replacement":"[status, help.to_string()]","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: useless use of `vec!`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ui.rs:54:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let text = vec![status, help.to_string()];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: you can use an array directly: `[status, help.to_string()]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::useless_vec)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"6 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 6 warnings emitted\u001b[0m\n\n"}
